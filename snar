#!/bin/sh

# DOTREPO="https://github.com/johannesHHM/buerice"

SCRIPTDIR="$(dirname $(realpath "$0"))"
RICEREPO='https://github.com/johannesHHM/vandringsmann.git'

DIALOG_TITLE='SNAR installation'
export DIALOGRC="$SCRIPTDIR/dialogrc"

TMPDIR='/tmp/snar'

dialog_msg() {
	dialog --title "$DIALOG_TITLE" --msgbox "$1" 8 78 3>&1 1>&2 2>&3
}

dialog_info() {
	dialog --title "$DIALOG_TITLE" --infobox "$1" 8 78 3>&1 1>&2 2>&3
}

dialog_yesno() {
	dialog --title "$DIALOG_TITLE" --yesno "$1" 8 78 3>&1 1>&2 2>&3
}

dialog_input() {
	if ! tmp=$(dialog --title "$DIALOG_TITLE" --inputbox "$2" 8 78 3>&1 1>&2 2>&3) ; then
		exit 7
	fi
	#TODO test for spaces
	eval "$1=$tmp"
}

dialog_pass() {
	if ! tmp=$(dialog --title "$DIALOG_TITLE" --passwordbox "$2" 8 78 3>&1 1>&2 2>&3) ; then
		exit 7
	fi
	eval "$1=$tmp"
}

installpkg() {
	pacman --noconfirm --needed -S "$@" >/dev/null 2>&1
}

get_new_user() {
	while true ; do
		if [ -z $setname ] ; then
			dialog_input name 'Enter username' || exit 3
			[ -z "$name" ] && dialog_msg 'Username can not be expty, please try again' && continue
			if id "$name" >/dev/null 2>&1 ; then
				dialog_yesno "User with name '$name' already exists, install files too existing user?" || continue
				userexists=true
				if ! dialog_yesno "Create new password for '$name'?" ; then
					nopass=true
					break
				fi
			fi
		fi
		setname=true

		dialog_pass pass 'Enter password' || exit 3
		dialog_pass passconf 'Confirm password' || exit 3
		[ ! "$pass" = "$passconf" ] && dialog_msg 'Non-matching passwords, please try again' && continue
		[ -z "$pass" ] && dialog_msg 'Password can not be empty, please try again' && continue

		break
	done
	unset setname passconf
}

setup_user() {
	dialog_info "Setting up user '$name' ..."
	USERHOME="/home/$name"
	if [ -z "$userexists" ] ; then 
		useradd -m "$name" >/dev/null 2>&1
		rm "$USERHOME/.bash"* # delete generated bash files
	fi
	[ -z "$nopass" ] && echo "$name:$pass" | chpasswd
	usermod -a -G wheel "$name"

}

gitmakeinstall() {
	progname=$(echo "$1" | sed 's/.*\/\([^\/]*\)\.git/\1/')
	dialog_info "Installing '$progname' ($n/$total) from source ..."
	SOURCEDIR="$USERHOME/.local/source"
	[ ! -d "$SOURCEDIR" ] && mkdir -p "$SOURCEDIR"
	[ ! -d "$SOURCEDIR"/$progname/.git/ ] && \
		git clone "$1" "$SOURCEDIR/$progname" >/dev/null 2>&1
	cd "$SOURCEDIR/$progname"
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	unset $progname
}

install_progs() {
	total="$(wc -l < "$SCRIPTDIR/progs.csv")"
	while IFS=, read -r tag prog ; do
		n=$((n + 1))
		case "$tag" in
			#"A") aurinstall "$program" "$comment" ;;
			"G") gitmakeinstall "$prog" ;;
			*) dialog_info "Installing '$prog' ($n/$total) ..." ; installpkg "$prog" ;;
			esac
	done <"$SCRIPTDIR/progs.csv"
	unset total n tag prog
}

install_dots() {
	dialog_info "Installing dot files for '$name' ..."
	git clone "$RICEREPO" "$TMPDIR/dots" >/dev/null 2>&1
	cp -r "$TMPDIR/dots/". "$USERHOME"
	rm -r "$USERHOME/.git/"
	chown -R "$name:$name" "$USERHOME"
}

run_posthooks() {
	while IFS=, read -r script desc toggle deps ; do
		depends="$depends
$script,$deps"
		set -- "$@" "$script" "$desc" "$toggle"
	done <"$SCRIPTDIR/hooks.csv"

	scripts="$(dialog --title "$DIALOG_TITLE" \
		--checklist 'Choose hooks too run' 18 78 11 \
		"$@" 3>&1 1>&2 2>&3)" || exit 1

	total="$(echo "$scripts" | wc -w)"
	for script in $scripts ; do
		n=$((n + 1))
		deps="$(echo "$depends" | sed -n "/^$script/{s/^[^,]*,\(.*\)/\1/p}")"
		if [ -n "$deps" ] ; then
			dialog_info "Installing dependencies: $deps\nneeded for hook '$script' ($n/$total) ..."
			installpkg $deps
		fi
		dialog_info "Running post-hook script '$script' ($n/$total) ..."
		"$SCRIPTDIR/hooks/$script" >/dev/null 2>&1 || \
			dialog_msg "ERROR: could not find script '$script' in hooks dir, Ok to continue ..."
	done
	unset script desc toggle deps depends scripts n
}

[ "$(id -u)" -ne 0 ] && echo "error, snar must be run as root" && exit 1

if [ -e $TMPDIR ] ; then
	dialog_yesno "Temporary directory '$TMPDIR' already exists, delete it too continue?" || \
		exit 3
fi

mkdir "$TMPDIR" # temporary dir for cloning into
trap "rm -rf $TMPDIR" HUP INT QUIT TERM PWR EXIT

# pacman --noconfirm --needed -Syu # sync and update system
pacman --noconfirm --needed -Sy dialog >/dev/null 2>&1 # install dialog for dialogs

for prog in git base-devel ; do
	dialog_info "Installing '$prog' needed for installation ..."
	installpkg "$prog"
done

# allow wheel to sudo
echo "%wheel ALL=(ALL:ALL) ALL" >/etc/sudoers.d/00-wheel-all

get_new_user
setup_user

install_progs

install_dots

# source bashrc in .config
if ! grep -q '$HOME/.config/bash/bashrc' /etc/bash.bashrc ; then
echo 'if [ "$EUID" -ne 0 ]; then
source "$HOME/.config/bash/bashrc"
fi'>>/etc/bash.bashrc
fi

run_posthooks

# make sure user owns everything in their directory
chown -R "$name:$name" "$USERHOME/"

rm -rf "$TMPDIR" # delete temporary dir

dialog_msg "Installation succesfully* completed!\n\n\n* unless an unforseen error has occurred!"

